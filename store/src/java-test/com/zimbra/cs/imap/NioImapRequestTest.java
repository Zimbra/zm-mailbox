package com.zimbra.cs.imap;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.junit.After;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

/**
 * @author zimbra
 *
 */
@RunWith(PowerMockRunner.class)
@PrepareForTest({ImapConfig.class})
public class NioImapRequestTest {

    String COPY_TO_TRASH = "29.6 UID COPY 11063,11085,11089,11093,11098:11099,11107,11113,11115,11133,11155,11158,11163,11166,11171,11189:11190,11194,11198:11199,11208,11211,11216,11219,11224,11227,11231,11234:11235,11241:11242,11245,11249,11252,11256,11259,11263,11266,11271,11277:11278,11285,11288,11293,11296,11301,11304,11308,11311:11312,11315,11318:11319,11322,11327,11330,11335,11341,11345,11348,11352,11355:11356,11360,11363:11364,11367,11372,11376,11381,11384,11390,11393,11398,11401:11402,11407,11420,11423,11432,11435,11439,11442,11447,11450:11451,11454,11458:11459,11462,11466,11469,11478,11484,11489,11492,11497,11515,11519,11527,11562,11580,11587,11621,11626,11631,11637,11645,11650,11658,11660,11665,11677,11685,11691,11694,11701,11707,11722,11724,11736,11738,11743,11749,11753,11760,11765,11773,11777,11793,11795,11801,11809:11810,11814,11823,11826,11830,11833,11849,11880,11883,12074,12114:12115,12124,12141,12146,12159,12180,12474,13244,13378,13418,13448,13585,13722,13744,13756,13769,13774,13785,13792,13799,13805,13815,13824,13832,13835,13847,13854,13866,13871,13876,13884,13889,13892,13903,13913,13924,13927,13935,13941,13944,13958:13959,13972,13978,13987,13993,14004:14005,14010,14017,14021,14029,14040,14052,14063,14066,14073,14081,14093,14097,14107,14117,14120,14133,14135,14149,14153,14156,14164,14171,14181,14187,14195,14200,14203:14204,14208,14223,14231,14237,14244,14250:14251,14261,14269:14270,14279,14284,14288:14289,14296,14304,14314,14321,14326:14328,14331,14334,14343,14349,14357,14362,14369:14370,14372,14380,14382,14395,14403,14405:14407,14410,14415:14416,14424,14436,14439:14440,14444,14450:14452,14455,14462,14470,14481,14486,14488,14492:14493,14495,14503:14504,14514,14517,14521,14525,14530,14532:14533,14542,14552,14555:14556,14565:14566,14569:14570,14575,14579:14580,14586,14593,14596,14603,14607,14611,14616,14623:14624,14627,14632,14640,14644,14647,14652,14658,14664,14668,14672,14674,14677,14681,14687,14691,14694,14697,14704:14706,14709,14713:14714,14721,14724,14728,14735,14739:14740,14744,14750,14754:14755,14759:14760,14762,14770,14772,14775,14777,14781,14784,14788,14795,14798:14799,14802,14807,14809,14813,14819,14821,14824,14830,14833,14837,14839,14843,14845,14850,14852,14857:14858,14862,14870,14874,14881:14883,14887,14891,14894,14897:14898,14903,14908,14910:14911,14918,14923,14927:14929,14934:14935,14940,14945,14948,14952,14955,14957,14963:14964,14971,14975,14980:14981,14983,14987,14993,15002,15005,15012:15013,15019:15021,15027,15030,15036,15038,15046,15054,15059,15061:15062,15066,15069,15073,15075,15082,15088,15093,15096,15101,15104,15106,15112,15117:15118,15125,15135:15136,15146,15152,15154,15164,15170,15174,15190:15192,15200:15203,15217,15220,15224,15230,15235:15236,15241,15245,15250,15255,15261,15265:15266,15272:15273,15282,15295,15302,15310,15316:15317,15322,15324,15328,15332,15339,15347,15352,15356,15369,15374,15380,15388,15390,15403,15406,15410,15421,15428,15433,15436,15439,15443,15450,15461,15468,15477,15481 Trash";

    /**
     * @throws java.lang.Exception
     */
    @After
    public void tearDown() throws Exception {
    }

    /**
     * Test method for
     * {@link com.zimbra.cs.imap.NioImapRequest#checkSize(long)}.
     */
    @Test
    public void testCheckSize() {
        try {
            ImapHandler handler = new MockImapHandler();
            NioImapRequest req = new NioImapRequest(handler);
            req.parse(COPY_TO_TRASH);
            ImapConfig imapConfig = PowerMockito.mock(ImapConfig.class);
            PowerMockito.when(imapConfig.getMaxRequestSize()).thenReturn(2*1024);
            handler.config = imapConfig;
            System.out.println(req.parts.get(0).getString().length());
            req.checkSize(req.parts.get(0).getString().length());
            fail("Exception should be thrown");
        } catch (Exception e) {
            Assert.assertNotNull(e);
            assertTrue(e.getMessage().equalsIgnoreCase("maximum request size exceeded"));
        }
    }
}
